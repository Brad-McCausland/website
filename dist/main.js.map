{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"React\"","webpack:///./src/index.tsx","webpack:///external \"ReactDOM\"","webpack:///./src/components/SlideShowView.tsx","webpack:///./src/utils/ImageLoader.tsx","webpack:///./src/utils/HttpGet.tsx"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","React","WebPage","Component","props","super","this","state","windowWidth","window","innerWidth","images","updateWindowDimensions","addEventListener","setState","outerWidth","scrollX","console","log","className","style","width","height","backgroundImage","backgroundSize","display","flex","justifyContent","alignItems","margin","color","fontSize","fontFamily","textAlign","backgroundColor","marginTop","marginLeft","marginRight","maxWidth","minWidth","clearImages","fetchImages","then","result","catch","error","errorImage","Image","src","SlideShowView","ERROR_IMAGE_SRC","ReactDOM","render","document","getElementById","LOADING_ANIMATION_SRC","currentImageIndex","currentImageSrc","length","showLoadingAnimationWhenEmpty","onMouseDown","advanceImagePointer","newIndex","url","timeout","Promise","resolve","reject","httpGet","decodedImages","imageData","allImages","JSON","parse","returnImages","Array","keys","forEach","image","unshift","decodeImages","Error","timeLimit","xmlHttp","XMLHttpRequest","open","send","onreadystatechange","readyState","responseText","setTimeout"],"mappings":"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","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","module.exports = React;","import * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\n\r\nimport { SlideShowView } from \"./components/SlideShowView\";\r\nimport { fetchImages } from \"./utils/ImageLoader\";\r\nimport { Button } from \"./components/Button\";\r\nimport { RoundedImage } from \"./components/RoundedImage\";\r\n\r\ninterface WebPageProps\r\n{\r\n\r\n}\r\n\r\n// State defines all private properties\r\ninterface WebPageState\r\n{\r\n    windowWidth: number;\r\n    images: HTMLImageElement[],\r\n}\r\n\r\n\r\nclass WebPage extends React.Component<WebPageProps, WebPageState>\r\n{\r\n    constructor(props: WebPageProps)\r\n    {\r\n        super(props);\r\n\r\n        this.state =\r\n        {\r\n            windowWidth: window.innerWidth,\r\n            images: [],\r\n        };\r\n\r\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        this.updateWindowDimensions();\r\n        window.addEventListener('resize', this.updateWindowDimensions);\r\n    }\r\n\r\n    updateWindowDimensions()\r\n    {\r\n        this.setState({ windowWidth: window.outerWidth - window.scrollX});\r\n        \r\n        console.log(this.state.windowWidth);\r\n    }\r\n\r\n    render()\r\n    {\r\n        const images = this.state.images;\r\n\r\n        const windowWidth = window.innerWidth;\r\n        const offsetToCenter = (1920 - windowWidth)/2;\r\n\r\n        return (\r\n            <div className = \"web_page\">\r\n                <div className = \"hero_image\" style = {{\r\n                    width: this.state.windowWidth,\r\n                    height: this.state.windowWidth*.5625,\r\n                    backgroundImage: \"url(./src/images/hero_road.jpg)\",\r\n                    backgroundSize: \"cover\",\r\n                    display: \"flex\",\r\n                    flex: \"1\",\r\n                    justifyContent: \"center\",\r\n                    alignItems: \"center\",\r\n                    margin: \"auto\"\r\n                }}>\r\n                    <div>\r\n                        <h1 style = {{ color: \"white\", fontSize: \"96px\", fontFamily: \"Raleway\", textAlign: 'center'}}> Brad McCausland </h1>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className = \"body\" >\r\n                    {/*\r\n                    <SlideShowView width={600} height={600} images={images} showLoadingAnimationWhenEmpty={true}/>\r\n\r\n                    <Button\r\n                        value=\"load images\"\r\n                        onClick={() => this.loadImages()}\r\n                    />\r\n                    <Button\r\n                        value=\"clear images\"\r\n                        onClick={() => this.clearImages()}\r\n                    />\r\n                    */}\r\n                    <div className = \"paragraph\"\r\n                         style = \r\n                         {{\r\n                             backgroundColor: \"white\",\r\n                             marginTop: \"20px\",\r\n                             marginLeft: \"20vw\",\r\n                             marginRight: \"20vw\",\r\n                             maxWidth: \"1080px\",\r\n                             minWidth: \"400px\",\r\n                             height: \"1000px\",\r\n                             display: \"flex\",\r\n                             justifyContent: \"center\",\r\n                             alignItems: \"center\"\r\n                         }}>\r\n                        <p>\r\n                            This is a paragraph\r\n                        </p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n\r\n    loadImages()\r\n    {\r\n        this.clearImages();\r\n        const imageLoadPromise = fetchImages(\"http://localhost:8001/\", 3000);\r\n        imageLoadPromise.then((result: HTMLImageElement[]) =>\r\n        {\r\n            this.setState (\r\n                {\r\n                    images: result,\r\n                }\r\n            );\r\n        }).catch((error: string) =>\r\n        {\r\n            console.log(error);\r\n            var errorImage = new Image();\r\n            errorImage.src = SlideShowView.ERROR_IMAGE_SRC;\r\n\r\n            this.setState (\r\n                {\r\n                    images: [errorImage],\r\n                }\r\n            );\r\n        });\r\n    }\r\n    \r\n    clearImages()\r\n    {\r\n        this.setState (\r\n            {\r\n                images: [],\r\n            }\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render (\r\n    <WebPage />,\r\n    document.getElementById(\"example\")\r\n);","module.exports = ReactDOM;","import * as React from \"react\";\r\n\r\n// Props define elements required to instantiate\r\ninterface SlideShowProps\r\n{\r\n    width: number,\r\n    height: number,\r\n    images: HTMLImageElement[],\r\n    showLoadingAnimationWhenEmpty: boolean,\r\n}\r\n\r\n// State defines all private properties\r\ninterface SlideShowState\r\n{\r\n    currentImageIndex: number,\r\n}\r\n\r\nexport class SlideShowView extends React.Component<SlideShowProps, SlideShowState>\r\n{\r\n    // TODO: Should the slideshowview own the error image?\r\n    static ERROR_IMAGE_SRC = \"./src/images/image_load_error.png\";\r\n    private LOADING_ANIMATION_SRC = \"./src/images/loading.gif\";\r\n\r\n    constructor(props: SlideShowProps)\r\n    {\r\n        super(props);\r\n        this.state = {currentImageIndex: 0}\r\n    }\r\n\r\n    render()\r\n    {\r\n        var currentImageSrc;\r\n        var style = {};\r\n\r\n        if (this.props.images.length)\r\n        {\r\n            // Display current image if images are loaded\r\n            currentImageSrc = this.props.images[this.state.currentImageIndex].src;\r\n        }\r\n        else\r\n        {\r\n            // Display spinner gif if no images\r\n            currentImageSrc = this.LOADING_ANIMATION_SRC;\r\n\r\n            // Hide element if specified in props\r\n            style = this.props.showLoadingAnimationWhenEmpty ? {} : {display: 'none'};\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <img\r\n                    src         = {currentImageSrc}\r\n                    style       = {style}\r\n                    width       = {this.props.width}\r\n                    height      = {this.props.height}\r\n                    onMouseDown = {this.advanceImagePointer.bind(this)}\r\n                />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    advanceImagePointer(): void\r\n    {\r\n        var newIndex = (this.state.currentImageIndex + 1) % (this.props.images.length || 1); // mod by length of images OR 1 if length is zero\r\n        this.setState( {currentImageIndex: newIndex} );\r\n    }\r\n}","import { httpGet } from \"./HttpGet\";\r\n\r\n// Function fetchImages() takes a url to imageService and a time out duration as arguments, and attempts to retrieve and decode the images.\r\n// Will return a promise that will resolve once the images have finished decoding\r\nexport function fetchImages(url: string, timeout: number): Promise<HTMLImageElement[]>\r\n{\r\n    return new Promise (function (resolve, reject)\r\n    {\r\n        const httpPromise = httpGet(url, timeout)\r\n        {\r\n            httpPromise.then(function(result: string)\r\n            {\r\n                if (result)\r\n                {\r\n                    var decodedImages = decodeImages(result);\r\n                    if (decodedImages)\r\n                    {\r\n                        resolve(decodedImages);\r\n                    }\r\n                    else\r\n                    {\r\n                        reject(Error(\"Error: images could not be decoded\"));\r\n                    }\r\n                }\r\n            }).catch(function(error: string)\r\n            {\r\n                console.log(error)\r\n                reject(error);\r\n            })\r\n        }\r\n    });\r\n}\r\n\r\n// Takes the result of calling image service, unpacks the data into images, and loads them into the slideshow array\r\nfunction decodeImages(imageData: string): HTMLImageElement[] | null\r\n{\r\n    try\r\n    {\r\n        // Array of images in Base64 \r\n        var allImages = JSON.parse(imageData);\r\n        allImages = allImages[\"album_images\"];\r\n\r\n        // Array to be filled with completed images\r\n        var returnImages = Array<HTMLImageElement>()\r\n\r\n        Object.keys(allImages).forEach(function(key)\r\n        {\r\n            let src = \"data:image/jpeg;base64,\"\r\n            src += allImages[key];\r\n            let image = new Image();\r\n            image.src = src;\r\n            returnImages.unshift(image);\r\n        });\r\n\r\n        return returnImages;\r\n    }\r\n    catch (error)\r\n    {\r\n        console.log(\"Error: could not decode data from image service\");\r\n        return null;\r\n    }\r\n}","// A simple utility function for performing http get requests. Returns a promise that will\r\n// resolve with the response text on completion, or reject after a user-supplied time out.\r\n\r\nexport function httpGet(url: string, timeLimit: number): Promise<string>\r\n{\r\n    return new Promise (function(resolve, reject)\r\n    {\r\n        var xmlHttp = new XMLHttpRequest();\r\n        xmlHttp.open( \"GET\", url, true); // false for synchronous request\r\n        xmlHttp.send(null);\r\n\r\n        xmlHttp.onreadystatechange = function()\r\n        {\r\n            if (xmlHttp.readyState === 4)\r\n            {\r\n                resolve(xmlHttp.responseText);\r\n            }\r\n        }\r\n\r\n        setTimeout(function(){ reject(Error(\"Timeout after \" + timeLimit/1000 + \" seconds\")) }, timeLimit);\r\n    });\r\n}"],"sourceRoot":""}